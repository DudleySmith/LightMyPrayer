<script src="<%=APP_PATH %>/js/processing-js/processing-1.4.8.min.js"></script>

<script type="text/processing" data-processing-target="processing-canvas">
var sketch = document.querySelector('#sketch');
var sketch_style = getComputedStyle(sketch);
var canvas_width = parseInt(sketch_style.getPropertyValue('width')) - 10;
var canvas_height = window.innerHeight; //- 2 * parseInt(btndiv_style.getPropertyValue('height'));
var debug = true;

// All Examples Written by Casey Reas and Ben Fry
// unless otherwise stated.
int numBalls = 7;
float spring = 0.0002; //0.05;
float gravity = -0.0001; //0.03;
float maxStartingSpeed = 0.85;
int boxMinHeight =170;
int boxMaxHeight =200;
float avgDisplayTime = 0;
float MaxAvgDisplayTime = 0;
int totalNumBalls = 0;

Ball[] balls = new Ball[numBalls];

void addBall(int index) {
	balls[index] = new Ball(random(width), height, random(boxMinHeight, boxMaxHeight), index, balls);
    totalNumBalls++;
}

void display_stats() {
	var sum = 0;
	for (int i = 0; i < numBalls; i++) {
		sum += balls[i].timeElapsed;
	}
	avgDisplayTime = sum / numBalls;
	if (avgDisplayTime > MaxAvgDisplayTime) {
		MaxAvgDisplayTime = avgDisplayTime;
	}
	fill(255);
	text("Curent Avg time : " + avgDisplayTime.toFixed(2), 50, 50);
	text("Max Avg time : " + MaxAvgDisplayTime.toFixed(2), 50, 65);
	text("Total rectangles : " + totalNumBalls, 50, 80);
}

void setup() 
{
  size(canvas_width, canvas_height);
  noStroke();
  smooth();
  for (int i = 0; i < numBalls; i++) {
  	addBall(i);
  }
 }

void draw() 
{
  background(0);
  for (int i = 0; i < numBalls; i++) {
  	// If a ball is gone, create a new one
  	if (balls[i].hasGone()) {
  		addBall(i);
  	}
    balls[i].collide();
    balls[i].move();
    balls[i].display();  
  }
  if (debug) {
  	display_stats();
  }
}

class Ball {
  float x, y;
  float boxWidth;
  float boxHeight;
  float vx = random(0, maxStartingSpeed);
  float vy = random(0, maxStartingSpeed);
  int id;
  Ball[] others;
  int red;
  int green;
  int blue;
  boolean gone = false;
  float startedAt = new Date();
  float timeElapsed = 0;
 
  Ball(float xin, float yin, float din, int idin, Ball[] oin) {
    x = xin;
    y = yin;
    boxWidth = din;
    boxHeight = 9/16*boxWidth;
    id = idin;
    others = oin;
    red = random(200,255);
    green = random(0,204);
    blue = random(0,128);
  } 
  
  void collide() {
    for (int i = id + 1; i < numBalls; i++) {
      float dx = others[i].x - x;
      float dy = others[i].y - y;
      float distance = sqrt(dx*dx + dy*dy);
      float minDist = others[i].boxWidth/2 + boxWidth/2; // ????? A modifier
      if (distance < minDist) { 
        float angle = atan2(dy, dx);
        float targetX = x + cos(angle) * minDist;
        float targetY = y + sin(angle) * minDist;
        float ax = (targetX - others[i].x) * spring;
        float ay = (targetY - others[i].y) * spring;
        vx -= ax;
        vy -= ay;
        others[i].vx += ax;
        others[i].vy += ay;
      }
    }   
  }
  
  void move() {
  	yOld = y;
    vy += gravity;
    x += vx;
    y += vy;
    if (x + boxWidth > width) {
      x = width - boxWidth;
      vx += -0.9; 
    }
    else if (x < 0) {
      x = 0;
      vx *= -0.9;
    }
    if (y + boxHeight > height) {
      y = height - boxHeight;
      vy *= -0.9; 
    } 
    else if (y + boxHeight < 0) {
      // flaging this ball as gone away
      gone = true;
    }
  }

  void display() {
    fill(red, green, blue);
    rect(x, y, boxWidth, boxHeight);
    fill(0);
    // Debug stuff...
    if (debug) {
    	balls[id].timeElapsed = (new Date() - balls[id].startedAt) / 1000;
		pos=y+20;
	    text("#"+id, x+10, pos); pos +=15;
		text("x = " + round(balls[id].x), x+10, pos); pos +=15;
		text("y = " + round(balls[id].y), x+10, pos); pos +=15;
		text("vx = " + balls[id].vx.toFixed(2), x+10, pos); pos +=15;
		text("vy = " + balls[id].vy.toFixed(2), x+10, pos); pos +=15;
  		text('Time Elapsed : ' + timeElapsed.toFixed(2) + ' s.', x+10, pos);

  		pos=y+20;
  		text("w = " + boxWidth.toFixed(2), x+70, pos); pos +=15;
  		text("h = " + boxHeight.toFixed(2), x+70, pos); pos +=15;
    }
  }

  boolean hasGone() {
  	return gone;
  }
}

/*  Un objet qui monte et qui rebondi su les bords du canvas.

int rad = 20;        // Width of the shape
float xpos, ypos;    // Starting position of shape    

float xspeed = 2.8;  // Speed of the shape
float yspeed = 1; //2.2;  // Speed of the shape

int xdirection = 1;  // Left or Right
int ydirection = 1;  // Top to Bottom


void setup() 
{
  size(canvas_width, canvas_height);
  noStroke();
  frameRate(30);
  ellipseMode(RADIUS);
  // Set the starting position of the shape
  xpos = random(0, width);
  ypos = height-rad;
}

void draw() 
{
  background(0);
  
  // Update the position of the shape
  xpos = xpos + ( xspeed * xdirection );
  ypos = ypos + ( yspeed * ydirection );
  
  // Test to see if the shape exceeds the boundaries of the screen
  // If it does, reverse its direction by multiplying by -1
  if (xpos > width-rad || xpos < rad) {
    xdirection *= -1;
  }
  if (ypos > height-rad) {
    ydirection *= -1;
  }
  if (ypos < rad) {
    ydirection *= +1;
    // respawn
	  xpos = random(0, width);
	  ypos = height-rad;
  }

  // Draw the shape
  ellipse(xpos, ypos, rad, rad);
}
*/

/*  Un Objet qui monte tout droit avec un petit aléa.

// All Examples Written by Casey Reas and Ben Fry
// unless otherwise stated.
// Global variables for the ball
float ball_x;
float ball_y;
float ball_dir = 1;
float ball_size = 5;  // Radius
float dx = 0;  // Direction
float dy = 0;  // Direction
// Global variables for the paddle
// int paddle_width = 5;
// int paddle_height = 20;
// int dist_wall = 15;

void setup()
{
  size(canvas_width, canvas_height);
  // rectMode(CENTER_RADIUS);
  ellipseMode(CENTER_RADIUS);
  noStroke();
  smooth();
  ball_y = height; //height/2;
  ball_x = random(0, width); //width/2;
}
void draw() 
{
  background(0);

  // ball_x += dx; //ball_dir * 1.0;
  // ball_y += dy;
  // if(ball_x > width+ball_size) {
    ball_x = ball_dir * random(ball_x - 1, ball_x + 1); //-width/2 - ball_size;
    ball_y = ball_y - 1; //random(0, height);
  //   dx = 0;
  //   dy = 0;
  // }

  // reached the top so, disappears.
  if (ball_y <= 0 ) {
  	ball_y = height; 
  	ball_x = random(0, width); 
  }
  // Constrain paddle to screen
  // float paddle_y = constrain(mouseY, paddle_height, height-paddle_height);
  // Test to see if the ball is touching the paddle
  // float py = width-dist_wall-paddle_width-ball_size;
  // if(ball_x == py 
  //    && ball_y > paddle_y - paddle_height - ball_size 
  //    && ball_y < paddle_y + paddle_height + ball_size) {
  //   ball_dir *= -1;
  //   if(mouseY != pmouseY) {
  //     dy = (mouseY-pmouseY)/2.0;
  //     if(dy >  5) { dy =  5; }
  //     if(dy < -5) { dy = -5; }
  //   }
  // } 

  // // If ball hits paddle or back wall, reverse direction
  // if(ball_x < ball_size && ball_dir == -1) {
  //   ball_dir *= -1;
  // }

  // // If the ball is touching top or bottom edge, reverse direction
  // if(ball_y > height-ball_size) {
  //   dy = dy * -1;
  // }
  // if(ball_y < ball_size) {
  //   dy = dy * -1;
  // }
  // Draw ball
  fill(255);
  ellipse(ball_x, ball_y, ball_size, ball_size);

  // Draw the paddle
  // fill(153);
  // rect(width-dist_wall, paddle_y, paddle_width, paddle_height);  
}
*/
</script>

<div id="sketch">
    <canvas id="processing-canvas" moz-opaque>
        Ce navigateur ne supporte pas les canvas HTML5. Essayez plutôt avec Chrome, Firefox, Safari, Opera ou Internet Explorer.
    </canvas>
</div>
