    <style type="text/css">
        html {
            font-family: "Palatino Linotype", "Book Antiqua", Palatino, serif;
            width: 100%;
            height: 100%; 
        }
        pre {
            font-size:8px;
        }
        .lead{
            margin: 10px 0px 10px 0px;
        }

        #sketch {
            height: 100%;
        }

        canvas {
            cursor: default !important;
        }

        .btn {
            border:1px #e1e1e1 solid;
            box-shadow: 0px 0px 2px 2px #e1e1e1;
            margin-left: 10px;
            padding: 5px 10px 0px 10px;
            text-decoration: none;
        }
    </style>


<div class="container">
    <div id="lead">
        <a class="btn" id="initBtn" href="#">Recommencer</a>
        <a class="btn" id="sendBtn" href="#">J'ai fini !</a>
    </div>
    <div id="sketch">
        <canvas id="mycanvas" moz-opaque>
            Ce navigateur ne supporte pas les canvas HTML5. Essayez plutôt avec Chrome, Firefox, Safari, Opera ou Internet Explorer.
        </canvas>
    </div>

<script type="text/javascript">
(function() {
    //
    // based on http://www.tricedesigns.com/2012/01/04/sketching-with-html5-canvas-and-brush-images/
    //
    // DOM Elements
    var canvas = document.querySelector('#mycanvas');
    var sketch = document.querySelector('#sketch');
    var sketch_style = getComputedStyle(sketch);
    var btndiv = document.querySelector('#lead');
    var btndiv_style = getComputedStyle(btndiv);
    var initBtn = document.querySelector('#initBtn');
    var sendBtn = document.querySelector('#sendBtn');

    // Working variables
    var sessionId = "client1"; // The session_id is given by the server with an ajax request.
    var imageType = "jpeg";
    var interval_timeout = null;
    var firstDotOnCanvas = true;
    var frameInterval = 67; // 40 milliseconds for 25 frames/sec
    var movie = new Array(); // data structure to store images and durations
    var movieIndex = -1;
    var durationFactor = 1;
    var dataurl_prec = null;

    // Brush
    var img = new Image();
    img.src = APP_PATH + '/images/brush2.png';

    // Canvas
    var ctx = canvas.getContext('2d');

    var isDrawing, lastPoint;

    // Init canvas
    function initCanvas(){
        canvas.width = parseInt(sketch_style.getPropertyValue('width')) - 10;
        canvas.height = window.innerHeight - 2 * parseInt(btndiv_style.getPropertyValue('height'));
        // Line type
        ctx.lineJoin = ctx.lineCap = 'round';
        // background
        ctx.fillStyle = 'rgb(0,0,0)';
        ctx.fillRect( 0, 0, canvas.width, canvas.height);
    }

    // Calculate distance between the two last points
    function distanceBetween(point1, point2) {
      return Math.sqrt(Math.pow(point2.x - point1.x, 2) + Math.pow(point2.y - point1.y, 2));
    }

    // Calculate angle between two points
    function angleBetween(point1, point2) {
      return Math.atan2( point2.x - point1.x, point2.y - point1.y );
    }

    // Get session_id from server.
    function setSessionId() {
        $.get( APP_PATH + "/session_id", function( data ) {
            jsondata = JSON.parse(data);
            sessionId = jsondata.sessionId;
            console.log( "got sessionId #" + sessionId );
        }) 
        .fail(function() {
            alert( "Impossible de récupérer un identifiant de session ! Vérifiez la connexion au réseau..." );
        });
    }

    // initializing movie structure
    function initMovie(){
        setSessionId();
        movie = new Array();
        movieIndex = 0;
        durationFactor = 1;
        window.clearInterval(interval_timeout);
        firstDotOnCanvas = true;
        dataurl_prec = null;
        initCanvas();
    }

    // Recording canvas as base64 coded images
    // debouncing same images : just increase duration
    function recordFrame() {
        var dataurl = canvas.toDataURL("image/" + imageType);
        var frame = {
            'image' : null,
            'duration' : frameInterval
        };

        if (dataurl_prec != dataurl) {
            movieIndex++;
            durationFactor = 1;
            dataurl_prec = dataurl;
            //console.log('new frame #'+movieIndex);
        } else {
            durationFactor++;
            //console.log('same frame, duration='+eval(durationFactor * frameInterval));
        }
        frame.image = dataurl;
        frame.duration = durationFactor * frameInterval;
        movie[movieIndex] = frame;
    }

    // Return true is value is null.
    function isNotNull(value) {
      return value != null;
    }

    // Posting data to the server
    function sendMovie() {
        var totalDuration, totalImagesLength = 0;
        window.clearInterval(interval_timeout);
        firstDotOnCanvas = true;
        // filtering, to send clean data
        movie = movie.filter(isNotNull);

        // Posting data
        var postData = {'sessionId': sessionId, 'movie' : JSON.stringify(movie) };
        $.post(APP_PATH + '/upload',
            postData,
            function(data, textStatus, jqXHR)
            {
                //data - JSON object from server.
            },"json")
        .fail(function(jqXHR, textStatus, errorThrown) 
                {
                    console.log(errorThrown);
                });
    }

    //
    // Binding mouse Events
    //
    canvas.onmousedown = function(e) {
        if (firstDotOnCanvas) {
            // Start recording generated frames
            interval_timeout = window.setInterval(recordFrame, frameInterval);
            firstDotOnCanvas = false;
        }
        isDrawing = true;
        lastPoint = { x: e.clientX, y: e.clientY };
    };

    canvas.onmousemove = function(e) {
      if (!isDrawing) return;
      
      var currentPoint = { x: e.clientX, y: e.clientY };
      var dist = distanceBetween(lastPoint, currentPoint);
      var angle = angleBetween(lastPoint, currentPoint);
      
      for (var i = 0; i < dist; i++) {
        x = lastPoint.x + (Math.sin(angle) * i) - 25;
        y = lastPoint.y + (Math.cos(angle) * i) - 25;
        ctx.drawImage(img, x, y);
      }
      
      lastPoint = currentPoint;
    };

    canvas.onmouseup = function() {
      isDrawing = false;
    };

    //
    // Binding buttons
    //
    initBtn.onclick = function() {
        initMovie();
    }
    sendBtn.onclick = function() {
        sendMovie();
    }

    // Starting by initializing app
    initMovie();

}());
</script>
</div>